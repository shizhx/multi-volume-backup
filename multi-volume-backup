#!/bin/bash
# A smart multi-volume backup script based on `tar`.

prog=$0
cmd=$1

MVB_WORK_DIR=${MVB_WORK_DIR:-"/tmp"}
MVB_CMD=${MVB_CMD:-""}
if [ -z "$cmd" ]; then
    cmd=$MVB_CMD
else
    shift
fi

usage() {
    local prog_name
    prog_name=$(basename "$0")

    echo "Usage:"
    echo "  $prog_name backup <source path> <dest path with volume name prefix> <volume size> <snar file path>"
    echo "  $prog_name restore <first volume path> <dest path> <strip path level>"
    echo
    echo "Note:"
    echo "  - snar file is used to save filelist to achieve incremental backup"
    echo "  - strip path level indicates how many levels of paths need to be deleted when extract"
    echo
    echo "Example:"
    echo "  multi-volume-backup backup /data /mnt/bak/full_backup- 100G /data.snar"
    echo "  multi-volume-backup restore /mnt/bak/full_backup-1.tar /data 1"
    exit 1
}

log_tag=""
__log_impl() {
    local now
    now=$(date "+%Y-%m-%d %H:%M:%S")

    echo "$now $*"
}

logi() {
    __log_impl "INFO" "[$log_tag] $*"
}

loge() {
    __log_impl "ERROR" "[$log_tag] $*"
}

logf() {
    __log_impl "FATAL" "[$log_tag] $*"
    exit 2
}


do_backup() {
    log_tag="backup-main"
    local src=$1
    local dst_prefix=$2
    local vol_size=$3
    local snar=$4

    # check argument
    local dst_dir
    local snar_dir

    dst_dir=$(dirname "$dst_prefix")
    snar_dir=$(dirname "$snar")

    [ -d "$src" ] || logf "Invalid source path($src): not a directory"
    [ -d "$dst_dir" ] || logf "Invalid dest path($dst_prefix): parent directory not exists"
    [ -n "$vol_size" ] || logf "Invalid volume size: CANNOT be empty"
    [ -d "$snar_dir" ] || logf "Invalid snar path($snar): parent directory not exists"

    # create pipe to recv data and signal
    mkdir -p "$MVB_WORK_DIR" || logf "Failed to create workdir: $MVB_WORK_DIR"
    local data_channel="$MVB_WORK_DIR/mvb-data-ch"
    local signal_channel="$MVB_WORK_DIR/mvb-signal-ch"
    rm -f "$data_channel" "$signal_channel"
    mkfifo "$data_channel" || logf "Failed to create data channel: $data_channel"
    mkfifo "$signal_channel" || logf "Failed to create signal channel: $signal_channel"

    # writer
    logi "Starting backgroud writer to receive data from tar and write to $dst_dir"
    trap 'kill $writer_pid' EXIT
    "$prog" __write "$dst_prefix" "$data_channel" "$signal_channel" &
    writer_pid=$!

    if ! timeout 10 cat "$signal_channel"; then
        logf "Failed to start backgroud writer: receive signal from $signal_channel timeout"
    fi

    # reader
    logi "Starting reader(tar) to read files and write to data channel $data_channel"
    # use environment variables to pass arguments to tar script
    export MVB_CMD="__change_volume"
    export MVB_DST_PREFIX="$dst_prefix"
    export MVB_VOL_SIZE="$vol_size"
    export MVB_DATA_CH="$data_channel"
    export MVB_SIGNAL_CH="$signal_channel"
    local ret
    tar -cM -v -H posix -L "$vol_size" -F "$prog" -f "$data_channel" -g "$snar" "$src"
    ret=$?
    if [ $ret -ne 0 ]; then
        loge "Failed to backup: tar exit with code $ret"
    else
        logi "Success to backup"
    fi
    
    # notify writer
    logi "Notify backgroud writer to quit"
    echo "QUIT" | timeout 10 tee "$signal_channel" > /dev/null
    timeout 10 wait "$writer_pid"
    if [ $? -eq 124 ]; then
        logi "Writer not exit after timeout, kill it(pid=$writer_pid)"
        kill -9 "$writer_pid"
    fi

    logi "Good Bye!"
    # cancel trap
    trap - EXIT
    exit "$ret"
}

do_write() {
    log_tag="backup-writer"
    local dst_prefix=$1
    local data_channel=$2
    local signal_channel=$3
    local vol_num=1

    logi "Writer started, notify main process"
    echo "WRITER_STARTED" > "$signal_channel" || logf "Failed to notify main process, exit"

    while true; do
        local dst="${dst_prefix}${vol_num}.tar"
        logi "Begin to receive data from $data_channel and write $dst"
        local checksum
        checksum=$(tee "$dst" --output-error=exit < "$data_channel" | sha256sum | awk '{print $1}')
        if [ $? -ne 0 ]; then
            # if cat process exit abnormally, tar process will receive SGPIPE signal then exit
            logf "Failed to write $dst, exit"
        fi

        logi "Success to write $dst, sha256sum: $checksum"
        echo "$checksum" > "$dst.sha256sum"

        vol_num=$((vol_num + 1))
        logi "Waiting for volume $vol_num"
        local sig
        sig=$(cat "$signal_channel")
        if [ "$sig" = "QUIT" ]; then
            logi "Received QUIT signal, exit"
            exit 0
        fi

    done
}

do_restore() {
    local src=$1
    local dst=$2
    local level=$3

    [ -n "$src" ] || usage
    [ -n "$dst" ] || usage
    [ -n "$level" ] || usage

    export MVB_CMD="__change_volume"
    tar -xM -v "--strip-components=$level" -F "$prog" -f "$src" -C "$dst"
}

wait_user_confirm() {
    local answer
    while true; do
        echo "Please mount a new disk/tape to the same mountpoint."
        read -r -p "Are new disk/tape mounted?(Y/n): " answer
        if [ "$answer" = "Y" ]; then
            return 0
        fi
    done
}

backup_next_volume() {
    # get arguments from environment variables
    local dst_prefix=${MVB_DST_PREFIX:-""}
    local vol_size=${MVB_VOL_SIZE:-""}
    local data_channel=${MVB_DATA_CH:-""}
    local signal_channel=${MVB_SIGNAL_CH:-""}
    local tar_fd=${TAR_FD:-""}

    # check arguments
    [ -n "$dst_prefix" ] || logf "MVB_DST_PREFIX CANNOT be empty"
    [ -n "$vol_size" ] || logf "MVB_VOL_SIZE CANNOT be empty"
    [ -n "$data_channel" ] || logf "MVB_DATA_CH CANNOT be empty"
    [ -n "$signal_channel" ] || logf "MVB_SIGNAL_CH CANNOT be empty"
    [ -n "$tar_fd" ] || logf "TAR_FD SHOULD NOT be empty"

    local dst_dir
    dst_dir=$(dirname "$dst_prefix")

    local size_num=${vol_size%?}
    local size_unit=${vol_size: -1}
    local avail

    # get availiable space of dest
    # FIXME: maybe we should use `stat command instead
    avail=$(df -B"$size_unit" "$dst_dir" | awk 'NR==2 {print $4}')
    avail=${avail%?}
    if [ -z "$avail" ]; then
        loge "Failed to get availiable space of $dst_dir"
        wait_user_confirm
    elif [ "$avail" -le "$size_num" ]; then
        loge "Availiable space of $dst_dir too small"
        wait_user_confirm
    fi

    # write next volume name to tar
    echo "$data_channel" >&"$tar_fd"
    # resume writer
    echo "RESUME" > "$signal_channel"
    return 0
}

restore_next_volume() {
    local tar_archive=${TAR_ARCHIVE:-""}
    local tar_volume=${TAR_VOLUME:-""}
    local tar_fd=${TAR_FD:-""}

    [ -n "$tar_archive" ] || logf "TAR_ARCHIVE SHOULD NOT be empty"
    [ -n "$tar_volume" ] || logf "TAR_VOLUME SHOULD NOT be empty"
    [ -n "$tar_fd" ] || logf "TAR_FD SHOULD NOT be empty"

    local prefix=${tar_archive%-*}
    local suffix=${tar_archive##*-}
    local ext=${suffix#*.}
    local next_vol_name="${prefix}-${tar_volume}.${ext}"

    while ! [ -r "$next_vol_name" ]; do
        loge "$next_vol_name is not readable"
        wait_user_confirm
    done

    echo "$next_vol_name" >&"$tar_fd"
}

do_change_volume() {
    log_tag="change_volume"
    local tar_volume=${TAR_VOLUME:-"unknown"}

    logi "Preparing volume $tar_volume"
    case "$TAR_SUBCOMMAND" in
    -c)
        backup_next_volume
        ;;
    -d|-x|-t)
        restore_next_volume
        ;;
    *)
        exit 1
        ;;
    esac
}

case "$cmd" in
backup)
    do_backup "$@"
    ;;
__write)
    do_write "$@"
    ;;
restore)
    do_restore "$@"
    ;;
__change_volume)
    do_change_volume
    ;;
*)
    usage
    ;;
esac